function PerformanceFunction(inputs)

  steps = 10;
  WSrange=linspace(90,200,steps);
  constraintInputs = inputs;
  constraintInputs = rmfield(constraintInputs, "EmptyWeight");
  constraintInputs = rmfield(constraintInputs, "GeometryOutput");
  constraintInputs = rmfield(constraintInputs, "Missionoutputs");
  
  landingConstraint = LandConstraintSizing(constraintInputs);

  constraintInputs.PerformanceInputs.WS = WSrange;

  takeoffConstraint = TakeoffConstraintSizing(constraintInputs);
  topOfClimbConstraint = TopOfClimbConstraintSizing(constraintInputs);

  missionnames = fieldnames(inputs.Missions);
  TWtakeoff = getfield(takeoffConstraint.Missionoutputs, missionnames{1}).PerformanceInputs.TW;
  TWtopOfClimb = getfield(topOfClimbConstraint.Missionoutputs, missionnames{1}).PerformanceInputs.TW;
  WSland = getfield(landingConstraint.Missionoutputs, missionnames{1}).PerformanceInputs.WS;

  TWmax=max([TWtakeoff,TWtopOfClimb]);
  TWmin=min([TWtakeoff,TWtopOfClimb]);

  % figure(1)
  % plot(WSrange, TWtakeoff)
  % hold on
  % plot(WSrange, TWtopOfClimb)
  % plot([WSland,WSland],[TWmin,TWmax])
  % hold off
  % grid on
  % legend("Takeoff","Top of Climb","Landing","Location","best")
  % xlabel("Wing Loading (lb/ft^2)")
  % ylabel("Thrust to Weight Ratio")

  centerTW = inputs.PerformanceInputs.TW;
  centerWS = inputs.PerformanceInputs.WS;

  W0takeoff=zeros(size(WSrange));
  W0topOfClimb=zeros(size(WSrange));

  for i=1:size(missionnames,1)
    W0takeofftemp = getfield(takeoffConstraint.Missionoutputs, missionnames{i}).Wmat(1,:);
    W0takeoff = W0takeofftemp.*(W0takeofftemp>W0takeoff) + W0takeoff.*(W0takeofftemp<=W0takeoff);

    W0topOfClimbtemp = getfield(topOfClimbConstraint.Missionoutputs, missionnames{i}).Wmat(1,:);
    W0topOfClimb = W0topOfClimbtemp.*(W0topOfClimbtemp>W0topOfClimb) + W0topOfClimb.*(W0topOfClimbtemp<=W0topOfClimb);
  end

  W0max=max([W0takeoff,W0topOfClimb]);
  W0min=min([W0takeoff,W0topOfClimb]);
  W0land = getfield(topOfClimbConstraint.Missionoutputs, missionnames{1}).Wmat(1);
% 
%   linspaceRangeOffset = mod(steps,2)-1;
%   TWstep = centerTW * carpetTWvariance;
%   TWmin = centerTW - TWstep;
%   TWmax = centerTW + TWstep;
%   WSstep = centerWS * carpetWSvariance;
%   WSmin = centerWS - WSstep;
%   WSmax = centerWS + WSstep;
% % 
% %   inputs.PerformanceInputs.TW = linspace(TWmin, TWmax, steps+linspaceRangeOffset);
% %   inputs.PerformanceInputs.WS = WSmax;
% %   WSWSp = WSmax * ones(1, steps+linspaceRangeOffset);
% %   W0WSp = GeneralSizingFunction(inputs);
% % 
% %   inputs.PerformanceInputs.TW = linspace(TWmin, TWmax, steps+linspaceRangeOffset);
% %   inputs.PerformanceInputs.WS = centerWS;
% %   WSWSc = centerWS * ones(1, steps+linspaceRangeOffset);
% %   W0WSc = GeneralSizingFunction(inputs);
% % 
% %   inputs.PerformanceInputs.TW = linspace(TWmin, TWmax, steps+linspaceRangeOffset);
% %   inputs.PerformanceInputs.WS = WSmin;
% %   WSWSm = WSmin * ones(1, steps+linspaceRangeOffset);
% %   W0WSm = GeneralSizingFunction(inputs);
% % 
% %   inputs.PerformanceInputs.TW = TWmax;
% %   inputs.PerformanceInputs.WS = linspace(WSmin, WSmax, steps+linspaceRangeOffset);
% %   WSTWp = inputs.PerformanceInputs.WS;
% %   W0TWp = GeneralSizingFunction(inputs);
% % 
% %   inputs.PerformanceInputs.TW = centerTW;
% %   inputs.PerformanceInputs.WS = linspace(WSmin, WSmax, steps+linspaceRangeOffset);
% %   WSTWc = inputs.PerformanceInputs.WS;
% %   W0TWc = GeneralSizingFunction(inputs);
% % 
% %   inputs.PerformanceInputs.TW = TWmin;
% %   inputs.PerformanceInputs.WS = linspace(WSmin, WSmax, steps+linspaceRangeOffset);
% %   WSTWm = inputs.PerformanceInputs.WS;
% %   W0TWm = GeneralSizingFunction(inputs);
% % 
% %   WSint = [WSmax, centerWS, WSmin, WSmax, centerWS, WSmin, WSmax, centerWS, WSmin];
% %   W0int = [W0TWp(end), W0TWp(steps/2), W0TWp(1), W0TWc(end), W0TWc(steps/2), W0TWc(1), W0TWm(end), W0TWm(steps/2), W0TWm(1)];
% %   % WSTWp(steps/2)
% % 
%   figure(2)
%   plot(WSrange, W0takeoff)
%   hold on
%   plot(WSrange, W0topOfClimb)
%   plot([WSland, WSland], [W0max, W0min])
% % 
% %   plot(WSWSp, W0WSp)
% %   plot(WSWSc, W0WSc)
% %   plot(WSWSm, W0WSm)
% %   plot(WSTWp, W0TWp)
% %   plot(WSTWc, W0TWc)
% %   plot(WSTWm, W0TWm)
% % 
% %   plot(WSint, W0int, " ob")
%   hold off
% %   grid on
% %   legend("Takeoff","Top of Climb","Landing", "WS="+num2str(WSmax), "WS="+num2str(centerWS), "WS="+num2str(WSmin), "TW="+num2str(TWmax), "TW="+num2str(centerTW), "TW="+num2str(TWmin),"Location","best")
% %   xlabel("Wing Loading (lb/ft^2)")
% %   ylabel("Takeoff Weight (lbs)")
% %   title("Carpet Plot Unskewed")
% % 
% %   if skewcenter(2) == 0
% %       offset = -skewOffset;
% %   elseif skewcenter(2) == 1
% %       offset = -2*skewOffset;
% %   end
% % 
% % 
% % 
% %   figure(3)
% %   plot(WSrange, W0to)
% %   hold on
% %   plot(WSrange, W0toc)
% %   plot(WSland*ones(steps), W0land)
% % 
% %   ws = warning('off','all');
% %   coeffs = polyfit([W0TWm(end), W0TWc(end), W0TWp(end)], [offset, skewOffset + offset, 2*skewOffset + offset], 2);
% %   offsets = polyval(coeffs, W0WSp);
% %   plot(WSWSp+offsets, W0WSp)
% % 
% %   coeffs = polyfit([W0TWm(steps/2), W0TWc(steps/2), W0TWp(steps/2)], [offset, skewOffset + offset, 2*skewOffset + offset], 2);
% %   offsets = polyval(coeffs, W0WSc);
% %   plot(WSWSc+offsets, W0WSc)
% % 
% %   coeffs = polyfit([W0TWm(1), W0TWc(1), W0TWp(1)], [offset, skewOffset + offset, 2*skewOffset + offset], 2);
% %   offsets = polyval(coeffs, W0WSm);
% %   plot(WSWSm+offsets, W0WSm)
% %   warning(ws)
% % 
% %   plot(WSTWp + 2*skewOffset + offset, W0TWp)
% %   plot(WSTWc + skewOffset + offset, W0TWc)
% %   plot(WSTWm + offset, W0TWm)
% % 
% %   plot([WSint(1:3) + 2*skewOffset + offset, WSint(4:6) + skewOffset + offset, WSint(7:9) + offset], W0int, " ob")
% %   hold off
% %   grid on
% %   legend("Takeoff","Top of Climb","Landing", "WS="+num2str(WSmax), "WS="+num2str(centerWS), "WS="+num2str(WSmin), "TW="+num2str(TWmax), "TW="+num2str(centerTW), "TW="+num2str(TWmin),"Location","best")
% %   xlabel("Wing Loading (lb/ft^2)")
% %   ylabel("Takeoff Weight (lbs)")
% %   title("Carpet Plot Skewed")
% 
% 
% 
% %% See Raymer Ch. 17 to comptue other performance characteristics
% %% See Raymer Ch. 16 to compute control and stability performance
